{
	"baseline": "Now, we have a Sqlite SQL table and a natural language question. You need to transfer the question into a SQLite SQL query, so that I can use SQL to find the answer.\nThe question is \"{question}\".\nThe available tables with their columns are:\nTable(Columns): {table_columns}.\nPlease complete the sqlite SQL query only with no explanation.\n{question}\nSELECT",

	"simple_structgpt_tableqa": {
		"select_columns": "You need to answer a question using a table with multiple rows and column headings. Specifically, you need to select the relevant columns and rows from the table and then obtain a sub-table that is relevant to the question. Then, use the sub-table to answer the question. \nTherefore, to answer \"{question}\", first look at the available columns in the table: {columns}. Which columns are most relevant to answering the question? Your output format is only the “Columns: ColumnName1, ColumnName2, ColumnName3...” form, no other form, with no explanation.",
		"select_rows": "You need to answer a question using a table with multiple rows and column headings. Specifically, you need to select the relevant columns and rows from the table and then obtain a sub-table that is relevant to the question. Then, use the sub-table to answer the question. \nTherefore, to answer \"{question}\", once you have selected the relevant columns {selected_columns}, your next step is to identify the necessary rows to answer the question based on their column values. Below is the list of rows in the table, arranged in order. Each row is represented by one line, starting with the row name followed by its corresponding column name and value pairs:\n{rows}\nTo answer \"{question}\", which rows should be considered? Your output format is only the “Rows: RowName1, RowName2, RowName3...” form, no other form, with no explanation. Your response should only contain the row names from the above candidates such as item 1, item 2.",
		"ask_final_answer_or_next_question": "The ordered list below shows the rows of a table, with each line displaying a different row along with its corresponding column name and value pairs. The format for each pair is (column name, value). The table contains:\n{table}\nAccording to the table, answer the question \"{question}\" with no explanation and DO NOT repeat the question. \nAnswer: "
	},

	"structgpt_text2sql": {
		"system": "You are a helpful assistant.",
		"free_generate": "### Here are the Sqlite SQL tables, with their properties:\n#\n{table}\n#\n### {question} Which tables do you need to complete the SQLite SQL query? Let's think step by step.",
		"table_column_select_reorganize": "Sure! Based on your response, provide only the required tables in the following format: 'Table_Name_1 | Table_Name_2' to simplify your response, which means using '|' to separate different tables. Don't use any other format or add any additional explanations.",
		"ask_final_answers": {
		  "has_fk": "### Complete sqlite SQL query only and with no explanation.\n#\n### Sqlite SQL tables, with their properties: \n#\n{table}\n# {fk}\n#\n### {question}\n SELECT",
		  "no_fk": "### Complete sqlite SQL query only and with no explanation.\n#\n### Sqlite SQL tables, with their properties: \n#\n{table}\n#\n### {question}\n SELECT"
		}
	},

	"method_1": "现在，我们有一个Sqlite SQL表和一个自然语言问题。\n问题是“{question}”。\n可用的表及其列为：\n表（列）：{table_columns}。可以看到，我们的数据库有3张表格：资产负债表（Balance_Sheet）中包括上市公司截至到2021年底和2022年底的各项资产数值及其总计、各项负债及其合计、各项所有者收益及其合计，它们可用于直接查询某年的数值或者同比增减，或者将其中的负债合计、资产总计、所有者权益合计等数据用于计算资产负债率等，或者将其中的资产总计、所有者权益合计等数据结合其它表格计算资产收益率、周转率等；利润表（Income_Statement）中包括上市公司2021年度和2022年度的各项收入、成本和利润，它们可用于直接查询某年的数值或者同比增减，或者将其中的营业总成本、营业总收入等数据用于计算成本收入比等，或者将净利润、营业收入等数据结合其它表格用于计算资产收益率、周转率等；现金流量表（Cash_Flow_Statement）中包括上市公司2021年度和2022年度的各项现金流数据，它们可用于直接查询某年的数值或者同比增减。\n你需要准确基于自然语言问题，找到需要的表名和列名，将问题转换成SQLite SQL查询语句，这样我就可以用SQL来找到答案。请仅完成sqlite SQL查询语句，不需要解释。\n{question}\nSELECT",

	"method_2": "Now, we have a Sqlite SQL table and a natural language question. You need to transfer the question into a SQLite SQL query, so that I can use SQL to find the answer.\nThe question is \"{question}\".\nThe available tables with their columns are:\nTable(Columns): {table_columns}.\nPlease complete the sqlite SQL query only with no explanation.\n{demo}\n{question}\nSELECT",

	"CoT": "现在，我们有一个Sqlite SQL表和一个自然语言问题。\n问题是“{question}”。\n可用的表及其列为：\n表（列）：{table_columns}。\n你需要准确基于自然语言问题，将问题转换成SQLite SQL查询语句，这样我就可以用SQL来找到答案。让我们一步一步来：\n第一步，确认查询项目和限制条件。\n第二步，检索查找项目的名称是否在可用的列名中，若是，选定表，使用查询对象精确查找，进入第四步；若否，进入第三步。\n第三步，判断查询项目是否需要数值推理，若是，生成需要的可用的表名和列名，以及计算式；若否，使用查询对象LIKE模糊查找。\n第四步，检索限制条件的名称是否在选定的表对应的可用的列名中，若是，使用查询对象精确查找；若否，判断限制条件是否涉及表格的列操作，若是启用表操作，若否使用查询对象LIKE模糊查找。\n最后，生成SQL查询语句。\n{demo}\n{question}\n第一步，",

	"CoT_ZeroShot": "现在，我们有一个Sqlite SQL表和一个自然语言问题。\n问题是“{question}”。\n可用的表及其列为：\n表（列）：{table_columns}。\n你需要准确基于自然语言问题，将问题转换成SQLite SQL查询语句，这样我就可以用SQL来找到答案。让我们一步一步来：\n第一步，确认查询项目和限制条件。\n第二步，检索查找项目的名称是否在可用的列名中，若是，选定表，使用查询对象精确查找，进入第四步；若否，进入第三步。\n第三步，判断查询项目是否需要数值推理，若是，生成需要的可用的表名和列名，以及计算式；若否，使用查询对象LIKE模糊查找。\n第四步，检索限制条件的名称是否在选定的表对应的可用的列名中，若是，使用查询对象精确查找；若否，判断限制条件是否涉及表格的列操作，若是启用表操作，若否使用查询对象LIKE模糊查找。\n最后，生成的SQL查询语句为：\n```sql\n\n```\n{question}\n第一步，",

	"CoT_2": "现在，我们有一个Sqlite SQL表和一个自然语言问题。\n问题是“{question}”。\n可用的表及其列为：\n表（列）：{table_columns}。可以看到，我们的数据库有3张表格：资产负债表（Balance_Sheet）中包括上市公司截至到2021年底和2022年底的各项资产数值及其总计、各项负债及其合计、各项所有者收益及其合计，它们可用于直接查询某年的数值或者同比增减，或者将其中的负债合计、资产总计、所有者权益合计等数据用于计算资产负债率等，或者将其中的资产总计、所有者权益合计等数据结合其它表格计算资产收益率、周转率等；利润表（Income_Statement）中包括上市公司2021年度和2022年度的各项收入、成本和利润，它们可用于直接查询某年的数值或者同比增减，或者将其中的营业总成本、营业总收入等数据用于计算成本收入比等，或者将净利润、营业收入等数据结合其它表格用于计算资产收益率、周转率等；现金流量表（Cash_Flow_Statement）中包括上市公司2021年度和2022年度的各项现金流数据，它们可用于直接查询某年的数值或者同比增减。\n你需要准确基于自然语言问题，找到需要的表名和列名，将问题转换成SQLite SQL查询语句，这样我就可以用SQL来找到答案。让我们一步一步来：\n第一步，确认查询项目和限制条件。\n第二步，检索查找项目的名称是否在可用的列名中，若是，选定表，使用查询对象精确查找，进入第四步；若否，进入第三步。\n第三步，判断查询项目是否需要数值推理，若是，生成需要的可用的表名和列名，以及计算式；若否，使用查询对象LIKE模糊查找。\n第四步，检索限制条件的名称是否在选定的表对应的可用的列名中，若是，使用查询对象精确查找；若否，判断限制条件是否涉及表格的列操作，若是启用表操作，若否使用查询对象LIKE模糊查找。\n最后，生成SQL查询语句。\n{demo}\n{question}\n第一步，"
}